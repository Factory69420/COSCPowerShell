

Practical Exercise: Find Cmdlets


   1.  Ensure that you have the latest copy of help by updating your help system.
      > Update-Help
   2.  Which cmdlets deal with the viewing/manipulating of processes?
      > get-process
   3. Display a list of services installed on your local computer.
      > get-service
   4. What cmdlets are used to write or output objects or text to the screen?
      > write-output
   5. What cmdlets can be used to create, modify, list, and delete variables?
      > Get-Variable
      > New-Variable
      > Remove-Variable 
    
   6. What cmdlet can be used, other than Get-Help, to find and list other cmdlets?
      > Get-Command
   7. Find the cmdlet that is used to prompt the user for input.
      > Read-Host





-------------------------------------------------------------------------------------------------------------------------------------
Practical Exercise: Running Cmdlets




 1.   Display a list of running processes.
      > Get-Process


 2.  Display a list of all running processes that start with the letter "s".
     > Get-Process | Where-Object { $_.ProcessName -like "s*" }


 3.   Find the cmdlet and its purpose for the following aliases:

        gal = get-alias

        dir = Get-childitem

        echo = write-output

        ? = where-object

        % = ForEach-Object

        ft = Format-Table

  4.  Display a list of Windows Firewall Rules.
      > Get-NetFirewallRule




  5. Create a new alias called "gh" for the cmdlet "Get-Help"
     > New-Alias -Name gh -Value Get-Help









-------------------------------------------------------------------------------------------------------------------------------------
Practical Exercise: Variables

 1.   Create a variable called "var1" that holds a random number between 25-50.
      > $var1 = Get-Random -Minimum 25 -Maximum 51

 2.  Create a variable called "var2" that holds a random number between 1-10.
      > $var2 = Get-Random -Minimum 1 -Maximum 11

 3.  Create a variable called "sum" that holds the sum of var1 and var2.
      > $sum = $var1 + $var2
 4.  Create a variable called "sub" that holds the difference of var1 and var2.
      > $sub = $var1 - $var2
 5.  Create a variable called "prod" that holds the product of var1 and var2.
      > $prod = $var1 * $var2
 6.   Create a variable called "quo" that holds the quotient of var1 and var2.
      > $quo = $var1 / $var2
 7.   Replace the variables in text with their values in the following format:

        "var1 + var2 = "sum"
         "{0} + {1} = {2}" -f $var1, $var2, $sum
  8.  Replace the variables in text with their values in the following format:

        "var1"- var2 = sub"

   9. Replace the variables in text with their values in the following format:

        "var1 * var2 = prod"

  10.  Replace the variables in text with their values in the following format:

        "var1 / "var2 = quo"






-------------------------------------------------------------------------------------------------------------------------------------
Practical Exercise: Reverse Arrays



    Create an array containing a range with a random starting and stopping point. The starting point will be a random number from -10 through 0. The ending point will be a random number from 1 through 20.

	For example, if the first random number is -3, and the second random number is 2, your array will be -3, -2, -1, 0, 1, 2

    Create a variable that contains the contents of the array in reverse

	Using the above example, your reversed array will be 2, 1, 0, -1, -2, -3 

$randomStart = Get-Random -Minimum -10 -Maximum 0


$randomEnd = Get-Random -Minimum 1 -Maximum 21


$rangeArray = $randomStart..$randomEnd

Write-Output $rangeArray
$reversed = [array]::Reverse($rangeArray)


$rangearray.Length
#$reversed = $rangearray[$rangearray.Length-1)..0]

-------------------------------------------------------------------------------------------------------------------------------------
Practical Exercise: Arrays & Hash Tables


$x=2
if ($x -eq 5) {
    Write-Host "Bob"
}
elseif ($x -eq 4){
        Write-Host "Sue"
}
elseif ($x -eq 2){
    "Tom"
}
elseif ($x -gt 1){
    "Mary"
}
else{
    "Who am I?"
}



-------------------------------------------------------------------------------------------------------------------------------------
Practical Exercise: Looping & Iteration

















